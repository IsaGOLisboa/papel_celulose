summarise(Valor = sum(Valor, na.rm = TRUE))
# Verificando se há categorias não esperadas
print(unique(paper_for_type_grafic$Grupo))
# Verificando quais itens estão na categoria "Outros"
paper_for_type_grafic %>% filter(Grupo == "Outros") %>% select(Item) %>% unique()
# Criando o gráfico com 3 curvas, uma para cada categoria
ggplot(dados_agrupados, aes(x = Ano, y = Valor, color = Grupo)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Produção de Papéis por Categoria ao Longo dos Anos",
x = "Ano",
y = "Valor (em unidades)") +
scale_color_manual(values = c("Papéis para Impressão, Jornais e Revistas" = "darkgreen",
"Papéis e Papelões para Embalagem" = "#4D4D4D",
"Papéis de Uso Doméstico" = "#76C7A0",
"Outros papéis e papelão" = "lightgray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_blank(),
legend.position = "right")
# Definindo as cores
color_scale <- c("Papéis para Impressão, Jornais e Revistas" = "darkgreen",
"Papéis e Papelões para Embalagem" = "#4D4D4D",
"Papéis de Uso Doméstico" = "#76C7A0",
"Outros papéis e papelão" = "lightgray")
# Definindo o intervalo de valores no eixo x e y
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
y_range <- c(0, 600)
# Criando o diretório onde os arquivos PNG serão salvos
dir.create("papel_por_tipo", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()  # Resetando o gráfico para cada frame
# Filtrando os dados até o ano atual do loop
dados_ate_ano <- dados_agrupados %>% filter(Ano <= dados_agrupados$Ano[i])
# Adicionando as curvas para cada grupo
for (grupo in categorias) {
grupo_dados <- dados_ate_ano %>% filter(Grupo == grupo)
if (nrow(grupo_dados) > 0) {  # Garantindo que há dados no grupo
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano,
y = grupo_dados$Valor,
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
text = paste("Ano:", grupo_dados$Ano, "<br>Valor:", grupo_dados$Valor),
hoverinfo = "text")
}
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)", range = y_range),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_por_tipo/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
# Definindo as cores
color_scale <- c("Papéis para Impressão, Jornais e Revistas" = "darkgreen",
"Papéis e Papelões para Embalagem" = "#4D4D4D",
"Papéis de Uso Doméstico" = "#76C7A0",
"Outros papéis e papelão" = "lightgray")
############################
# Definindo o intervalo de valores no eixo x
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
# Diretório onde os arquivos PNG serão salvos
dir.create("papel_production", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()
for (grupo in categorias) {
grupo_dados <- dados_agrupados %>% filter(Grupo == grupo)
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano[1:i],
y = grupo_dados$Valor[1:i],
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
frame = as.factor(grupo_dados$Ano[i]),
text = paste("Ano:", grupo_dados$Ano[1:i], "<br>Valor:", grupo_dados$Valor[1:i]),
hoverinfo = "text")
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)"),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0",
paper_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_production/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_production", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_production.gif")
cat("GIF criado com sucesso e salvo como 'papel_production.gif'.\n")
############################
# Criando gráfico animado
p <- plot_ly()
# Definindo a paleta de cores
color_scale <- c("Papéis para Impressão, Jornais e Revistas" = "darkgreen",
"Papéis e Papelões para Embalagem" = "#4D4D4D",
"Papéis de Uso Doméstico" = "#76C7A0",
"Outros papéis e papelão" = "lightgray")
# Adicionando as curvas para cada grupo
categorias <- unique(dados_agrupados$Grupo)
for (grupo in categorias) {
grupo_dados <- dados_agrupados %>% filter(Grupo == grupo)
# Adicionando as linhas e pontos ano a ano
for (i in seq_len(nrow(grupo_dados))) {
p <- p %>%
add_trace(x = grupo_dados$Ano[1:i],
y = grupo_dados$Valor[1:i],
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
frame = as.factor(grupo_dados$Ano[i]),
text = paste("Ano:", grupo_dados$Ano[1:i], "<br>Valor:", grupo_dados$Valor[1:i]),
hoverinfo = "text")
}
}
# Ajustando o layout do gráfico
p <- p %>% layout(
title = "Produção de Papéis por Categoria ao Longo dos Anos",
xaxis = list(title = "Ano"),
yaxis = list(title = "Valor (em unidades)"),
showlegend = TRUE,
legend =list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0",
paper_bgcolor = "#f0f0f0",
updatemenus = list(
list(type = "buttons",
buttons = list(
list(label = "Play",
method = "animate",
args = list(NULL, list(frame = list(duration = 500, redraw = TRUE),
fromcurrent = TRUE, mode = "immediate"))),
list(label = "Pause",
method = "animate",
args = list(NULL, list(frame = list(duration = 0, redraw = FALSE), mode = "immediate")))
))))
# Exibindo o gráfico
p
####################################
# Definindo o intervalo de valores no eixo x e y
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
y_range <- c(0, 600)
# Criando o diretório onde os arquivos PNG serão salvos
dir.create("papel_por_tipo", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()  # Resetando o gráfico para cada frame
# Filtrando os dados até o ano atual do loop
dados_ate_ano <- dados_agrupados %>% filter(Ano <= dados_agrupados$Ano[i])
# Adicionando as curvas para cada grupo
for (grupo in categorias) {
grupo_dados <- dados_ate_ano %>% filter(Grupo == grupo)
if (nrow(grupo_dados) > 0) {  # Garantindo que há dados no grupo
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano,
y = grupo_dados$Valor,
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
text = paste("Ano:", grupo_dados$Ano, "<br>Valor:", grupo_dados$Valor),
hoverinfo = "text")
}
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)", range = y_range),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_por_tipo/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
####################################
# Definindo o intervalo de valores no eixo x e y
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
y_range <- c(0, max(dados_agrupados$Valor, na.rm = TRUE))  # Ajustando automaticamente ao máximo valor
# Criando o diretório onde os arquivos PNG serão salvos
dir.create("papel_por_tipo", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()  # Resetando o gráfico para cada frame
# Filtrando os dados até o ano atual do loop
dados_ate_ano <- dados_agrupados %>% filter(Ano <= dados_agrupados$Ano[i])
# Verificando se há dados no filtro
if (nrow(dados_ate_ano) > 0) {
# Adicionando as curvas para cada grupo
for (grupo in categorias) {
grupo_dados <- dados_ate_ano %>% filter(Grupo == grupo)
if (nrow(grupo_dados) > 0) {  # Garantindo que há dados no grupo
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano,
y = grupo_dados$Valor,
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
text = paste("Ano:", grupo_dados$Ano, "<br>Valor:", grupo_dados$Valor),
hoverinfo = "text")
}
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)", range = y_range),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_por_tipo/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
####################################
# Definindo o intervalo de valores no eixo x e y
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
y_range <- c(0, max(dados_agrupados$Valor, na.rm = TRUE))  # Ajustando dinamicamente para o valor máximo
# Criando o diretório onde os arquivos PNG serão salvos
dir.create("papel_por_tipo", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()  # Resetando o gráfico para cada frame
# Filtrando os dados até o ano atual do loop
dados_ate_ano <- dados_agrupados %>% filter(Ano <= dados_agrupados$Ano[i])  # Acumulando os anos
# Adicionando as curvas para cada grupo
for (grupo in categorias) {
grupo_dados <- dados_ate_ano %>% filter(Grupo == grupo)
if (nrow(grupo_dados) > 0) {  # Garantindo que há dados no grupo
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano,
y = grupo_dados$Valor,
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
text = paste("Ano:", grupo_dados$Ano, "<br>Valor:", grupo_dados$Valor),
hoverinfo = "text")
}
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)", range = y_range),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_por_tipo/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
dados_agrupados$Ano
paper_for_type_grafic$Ano
x_range<-c(2000, 2022)
####################################
# Definindo o intervalo de valores no eixo x e y
x_range <- c(min(dados_agrupados$Ano), max(dados_agrupados$Ano))
y_range <- c(0, max(dados_agrupados$Valor, na.rm = TRUE))  # Ajustando dinamicamente para o valor máximo
# Criando o diretório onde os arquivos PNG serão salvos
dir.create("papel_por_tipo", showWarnings = FALSE)
# Loop para salvar cada frame como PNG
for (i in seq_len(nrow(dados_agrupados))) {
p_frame <- plot_ly()  # Resetando o gráfico para cada frame
# Filtrando os dados até o ano atual do loop
dados_ate_ano <- dados_agrupados %>% filter(Ano <= dados_agrupados$Ano[i])  # Acumulando os anos
# Adicionando as curvas para cada grupo
for (grupo in categorias) {
grupo_dados <- dados_ate_ano %>% filter(Grupo == grupo)
if (nrow(grupo_dados) > 0) {  # Garantindo que há dados no grupo
p_frame <- p_frame %>%
add_trace(x = grupo_dados$Ano,
y = grupo_dados$Valor,
type = "scatter",
mode = "lines+markers",
line = list(width = 2, color = color_scale[[grupo]]),
marker = list(size = 6, color = color_scale[[grupo]]),
name = grupo,
text = paste("Ano:", grupo_dados$Ano, "<br>Valor:", grupo_dados$Valor),
hoverinfo = "text")
}
}
# Layout do gráfico
p_frame <- p_frame %>%
layout(
title = paste("Produção de Papéis por Categoria ao Longo dos Anos:", dados_agrupados$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "Valor (em unidades)", range = y_range),
showlegend = TRUE,
legend = list(orientation = "v",
x = 1.02, y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0"
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("papel_por_tipo/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
# Criando o GIF a partir dos frames
frames <- list.files("papel_por_tipo", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "papel_por_tipo.gif")
cat("GIF criado com sucesso e salvo como 'papel_por_tipo.gif'.\n")
# Loop para salvar cada frame como PNG
x_range <- c(min(pop_world$Ano), max(pop_world$Ano))
for (i in seq_len(nrow(pop_world))) {
p_frame <- plot_ly() %>%
add_trace(x = pop_world$Ano[1:i],
y = pop_world$pop_world_norm[1:i],  # Usando a coluna normalizada
type = "scatter",
mode = "lines+markers",
line = list(color = "#4D4D4D"),
marker = list(color = "#4D4D4D"),
name = "População Mundial (normalizada)",
text = paste("Ano:", pop_world$Ano[1:i], "<br>População:", pop_world$pop_world_norm[1:i]),
hoverinfo = "text") %>%
add_trace(x = world_prod_grafic$Date[1:i],
y = world_prod_grafic$`World_Production (million of tons)_norm`[1:i],  # Usando a coluna normalizada
type = "scatter",
mode = "lines+markers",
line = list(color = "#76C7A0"),
marker = list(color = "#76C7A0"),
name = "Produção Mundial de Polpa (normalizada)",
text = paste("Ano:", world_prod_grafic$Date[1:i], "<br>Produção:", world_prod_grafic$`World_Production (million of tons)_norm`[1:i]),
hoverinfo = "text",
yaxis = "y2") %>%
layout(
title = paste("Evolução da população mundial e da produção mundial de polpa para papel:", pop_world$Ano[i]),
xaxis = list(title = "Ano", range = x_range),
yaxis = list(title = "População Mundial (normalizada)", range = c(0, 1)),
yaxis2 = list(title = "Produção Mundial de Polpa (normalizada)", overlaying = "y", side = "right", range = c(0, 1)),
showlegend = TRUE,
legend = list(
x = 0,
y = 1,
xanchor = "left",
yanchor = "top"),
plot_bgcolor = "#f0f0f0",
paper_bgcolor = "#f0f0f0",
margin = list(l = 50, r = 100, t = 50, b = 50)
)
# Nome do arquivo PNG com zeros à esquerda
png_filename <- sprintf("pop_production/frame_%03d.png", i)
# Salvando o gráfico como PNG usando Kaleido
save_image(p_frame, file = png_filename, engine = "kaleido")
}
# Criando o GIF a partir dos frames
frames <- list.files("pop_production", pattern = "*.png", full.names = TRUE)
frames <- sort(frames)
# Carregando os frames como imagens
imgs <- image_read(frames)
# Adicionando repetição do último frame para "pausar" no final
last_frame <- imgs[length(imgs)]
extra_frames <- rep(last_frame, 30)
imgs_with_pause <- c(imgs, extra_frames)
# Criando o GIF com animação lenta e pausando no final
animation <- image_animate(imgs_with_pause, fps = 2)
# Salvando o GIF
image_write(animation, "pop_production.gif")
cat("GIF criado com sucesso e salvo como 'pop_production.gif'.\n")
###############################Dados do Mundo
dados_FAOSTAT<- read.csv("Forestry_E_All_Data.csv")
###############################Dados do Mundo
dados_FAOSTAT<- read.csv("Forestry_E_All_Data.csv")
